workdir: "path/to/workdir"

rule all:
    input:
        "intermediate/lysozyme_gmx_nvt.pdb"


rule download_lysozyme:
    output:
        structure = "intermediate/lysozyme.pdb"
    script:
        "download_lysozyme.py"


rule prepare_structure:
    input:
        structure = "intermediate/{structure}.pdb"
    output:
        structure = "intermediate/{structure}_wohoh.pdb"
    script:
        "prepare_structure.py"


rule pdb_to_gmx:
    input:
        structure = "intermediate/{structure}_wohoh.pdb"
    output:
        structure = "intermediate/{structure}_gmx.pdb",
        topology = "intermediate/{structure}_gmx.top",
        posres = "intermediate/{structure}_posre.itp"
    run:
        import os.path
        shell(
            "gmx pdb2gmx "
            "-f {input.structure} "
            "-o {output.structure} "
            "-p {output.topology} "
            "-i {output.posres} "
            "-ff oplsaa "
            "-water spce"
        )
        with open(output.topology, "r+") as file:
            file.write(
                file.read().replace(
                    output.posres,
                    os.path.basename(output.posres),
                )
            )


rule boxing:
    input:
        structure = "intermediate/{structure}_gmx.pdb"
    output:
        structure = "intermediate/{structure}_gmx_boxed.pdb"
    shell:
        "gmx editconf "
        "-f {input.structure} "
        "-o {output.structure} "
        "-c "
        "-d 1.5 "
        "-bt cubic"


rule solvate:
    input:
        structure = "intermediate/{structure}_gmx_boxed.pdb",
        topology = "intermediate/{structure}_gmx.top"
    output:
        structure = "intermediate/{structure}_gmx_solvated.pdb",
        topology = "intermediate/{structure}_gmx_solvated.top"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx solvate "
            "-cp {input.structure} "
            "-cs spc216.gro "
            "-o {output.structure} "
            "-p {output.topology}"
        )


rule add_ions:
    input:
        structure = "intermediate/{structure}_gmx_solvated.pdb",
        topology = "intermediate/{structure}_gmx_solvated.top"
    output:
        structure = "intermediate/{structure}_gmx_ions.pdb",
        topology = "intermediate/{structure}_gmx_ions.top",
        binary = temp("tpr/{structure}_ions.tpr")
    params:
        mdp = "config/ions.mdp",
        solvent_group = "13"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "echo {params.solvent_group} | gmx genion "
            "-s {output.binary} "
            "-o {output.structure} "
            "-p {output.topology} "
            "-pname NA "
            "-nname CL "
            "-neutral"
        )


rule minimization:
    input:
        structure = "intermediate/{structure}_gmx_ions.pdb",
        topology = "intermediate/{structure}_gmx_ions.top"
    output:
        structure = "intermediate/{structure}_gmx_minim.pdb",
        topology = "intermediate/{structure}_gmx_minim.top",
        binary = temp("tpr/{structure}_minim.tpr"),
        trajectory = temp("intermediate/{structure}_minim.trr")
    params:
        mdp = "config/minim.mdp"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "gmx mdrun "
            "-s {output.binary} "
            "-o {output.trajectory} "
            "-c {output.structure}"
        )


rule nvt_equilibration:
    input:
        structure = "intermediate/{structure}_gmx_minim.pdb",
        topology = "intermediate/{structure}_gmx_minim.top",
        posres = "intermediate/{structure}_posre.itp"
    output:
        structure = "intermediate/{structure}_gmx_nvt.pdb",
        topology = "intermediate/{structure}_gmx_nvt.top",
        binary = temp("tpr/{structure}_nvt.tpr"),
        trajectory = "intermediate/{structure}_gmx_nvt.cpt"
    params:
        mdp = "config/nvt.mdp"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-r {input.structure} "
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "gmx mdrun "
            "-s {output.binary} "
            "-o {output.trajectory} "
            "-c {output.structure}"
        )


rule npt_equilibration:
    input:
        structure = "intermediate/{structure}_gmx_nvt.pdb",
        topology = "intermediate/{structure}_gmx_nvt.top",
        trajectory = "intermediate/{structure}_gmx_nvt.cpt",
        posres = "intermediate/{structure}_posre.itp"
    output:
        structure = "intermediate/{structure}_gmx_npt.pdb",
        topology = "intermediate/{structure}_gmx_npt.top",
        binary = temp("tpr/{structure}_npt.tpr"),
        trajectory = "intermediate/{structure}_gmx_npt.cpt"
    params:
        mdp = "config/npt.mdp"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-r {input.structure} "
            "-t {input.trajectory}"
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "gmx mdrun "
            "-s {output.binary} "
            "-o {output.trajectory} "
            "-c {output.structure}"
        )


rule production_simulation:
    input:
        structure = "intermediate/{structure}_gmx_npt.pdb",
        topology = "intermediate/{structure}_gmx_npt.top",
        trajectory = "intermediate/{structure}_gmx_npt.cpt"
    output:
        structure = "output/{structure}_gmx_md.pdb",
        topology = "intermediate/{structure}_gmx_md.top",
        binary = temp("tpr/{structure}_md.tpr"),
        trajectory = "output/{structure}_md.xtc"
    params:
        mdp = "config/md.mdp"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-t {input.trajectory}"
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "gmx mdrun "
            "-s {output.binary} "
            "-x {output.trajectory} "
            "-c {output.structure}"
        )