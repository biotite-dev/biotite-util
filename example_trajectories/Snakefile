workdir: "./md"

rule all:
    input:
        "lysozyme_gmx_nvt.pdb"


rule download_lysozyme:
    output:
        structure = "lysozyme.pdb"
    script:
        "download_lysozyme.py"


rule prepare_structure:
    input:
        structure = "{structure}.pdb"
    output:
        structure = "{structure}_prepared.pdb"
    script:
        "prepare_structure.py"


rule pdb_to_gmx:
    input:
        structure = "{structure}_prepared.pdb"
    output:
        structure = "{structure}_gmx.pdb",
        topology = "{structure}_gmx.top",
        posres = "{structure}_posre.itp"
    run:
        shell(
            "gmx pdb2gmx "
            "-f {input.structure} "
            "-o {output.structure} "
            "-p {output.topology} "
            "-i {output.posres} "
            "-ff oplsaa "
            "-water spce"
        )
        shell(
            "touch {output.posres}"
        )


rule boxing:
    input:
        structure = "{structure}_gmx.pdb"
    output:
        structure = "{structure}_gmx_boxed.pdb"
    shell:
        "gmx editconf "
        "-f {input.structure} "
        "-o {output.structure} "
        "-c "
        "-d 1.5 "
        "-bt cubic"


rule solvate:
    input:
        structure = "{structure}_gmx_boxed.pdb",
        topology = "{structure}_gmx.top"
    output:
        structure = "{structure}_gmx_solvated.pdb",
        topology = "{structure}_gmx_solvated.top"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx solvate "
            "-cp {input.structure} "
            "-cs spc216.gro "
            "-o {output.structure} "
            "-p {output.topology}"
        )


rule add_ions:
    input:
        structure = "{structure}_gmx_solvated.pdb",
        topology = "{structure}_gmx_solvated.top"
    output:
        structure = "{structure}_gmx_ions.pdb",
        topology = "{structure}_gmx_ions.top",
        binary = temp("../tpr/{structure}_ions.tpr")
    params:
        mdp = "../config/ions.mdp",
        solvent_group = "13"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "echo {params.solvent_group} | gmx genion "
            "-s {output.binary} "
            "-o {output.structure} "
            "-p {output.topology} "
            "-pname NA "
            "-nname CL "
            "-nn 8 "
        )


rule minimization:
    input:
        structure = "{structure}_gmx_ions.pdb",
        topology = "{structure}_gmx_ions.top"
    output:
        structure = "{structure}_gmx_minim.pdb",
        topology = "{structure}_gmx_minim.top",
        binary = temp("../tpr/{structure}_minim.tpr"),
        trajectory = temp("{structure}_minim.trr")
    params:
        mdp = "../config/minim.mdp"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "gmx mdrun "
            "-s {output.binary} "
            "-o {output.trajectory} "
            "-c {output.structure}"
        )


rule nvt_equilibration:
    input:
        structure = "{structure}_gmx_minim.pdb",
        topology = "{structure}_gmx_minim.top",
        posres = "{structure}_posre.itp"
    output:
        structure = "{structure}_gmx_nvt.pdb",
        topology = "{structure}_gmx_nvt.top",
        binary = temp("../tpr/{structure}_nvt.tpr"),
        checkpoint = "{structure}_gmx_nvt.cpt"
    params:
        mdp = "../config/nvt_{structure}.mdp"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-r {input.structure} "
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "gmx mdrun "
            "-v "
            "-s {output.binary} "
            "-c {output.structure} "
            "-cpo {output.checkpoint}"
        )


rule npt_equilibration:
    input:
        structure = "{structure}_gmx_nvt.pdb",
        topology = "{structure}_gmx_nvt.top",
        checkpoint = "{structure}_gmx_nvt.cpt",
        posres = "{structure}_posre.itp"
    output:
        structure = "{structure}_gmx_npt.pdb",
        topology = "{structure}_gmx_npt.top",
        binary = temp("../tpr/{structure}_npt.tpr"),
        checkpoint = "{structure}_gmx_npt.cpt"
    params:
        mdp = "../config/npt_{structure}.mdp"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-r {input.structure} "
            "-t {input.checkpoint} "
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "gmx mdrun "
            "-v "
            "-s {output.binary} "
            "-c {output.structure} "
            "-cpo {output.checkpoint}"
        )


rule production_simulation:
    input:
        structure = "{structure}_gmx_npt.pdb",
        topology = "{structure}_gmx_npt.top",
        checkpoint = "{structure}_gmx_npt.cpt"
    output:
        structure = "{structure}_gmx_md.pdb",
        topology = "{structure}_gmx_md.top",
        binary = temp("../tpr/{structure}_md.tpr"),
        trajectory = "{structure}_gmx_md.xtc"
    params:
        mdp = "../config/md_{structure}.mdp"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-t {input.checkpoint} "
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "gmx mdrun "
            "-v "
            "-s {output.binary} "
            "-x {output.trajectory} "
            "-c {output.structure}"
        )




rule generate_waterbox:
    output:
        structure = "waterbox_prepared.pdb"
    shell:
        "gmx solvate -o {output.structure} -box 5 5 5"


rule salt_waterbox:
    input:
        structure = "waterbox_gmx.pdb",
        topology = "waterbox_gmx.top"
    output:
        structure = "waterbox_gmx_ions.pdb",
        topology = "waterbox_gmx_ions.top",
        binary = temp("../tpr/waterbox_ions.tpr")
    params:
        mdp = "../config/ions.mdp",
        solvent_group = "2"
    run:
        shell(
            "cp {input.topology} {output.topology}"
        ),
        shell(
            "gmx grompp "
            "-f {params.mdp} "
            "-c {input.structure} "
            "-p {output.topology} "
            "-o {output.binary}"
        ),
        shell(
            "echo {params.solvent_group} | gmx genion "
            "-s {output.binary} "
            "-o {output.structure} "
            "-p {output.topology} "
            "-pname NA "
            "-nname CL "
            "-conc 0.15 "
            "-neutral "
        )